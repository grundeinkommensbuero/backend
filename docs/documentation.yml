openapi: 3.0.3
info:
  description: |
    This is the documentation for the api of the open source web application part of the [Expedition Grundeinkommen](https://expedition-grundeinkommen.de) campaign. 

    #### Github Repos:

    Back End: https://github.com/grundeinkommensbuero/backend

    Web Application: https://github.com/grundeinkommensbuero/website

    Admin Panel: https://github.com/grundeinkommensbuero/admin
  version: 1.0.0
  title: Expedition Grundeinkommen API
  contact:
    email: info@expedition-grundeinkommen.de
servers:
  - url: https://2j0bcp5tr9.execute-api.eu-central-1.amazonaws.com/dev
    description: Development server (uses test data)
  - url: https://ag5gu1z06h.execute-api.eu-central-1.amazonaws.com/prod
    description: Production server (uses live data)
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization # name of the header
    AdminApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization # name of the header
    ParamApiKeyAuth:
      type: apiKey
      in: query
      name: token
    BasicAuth:
      type: http
      scheme: basic
paths:
  /signatures:
    post:
      summary: Creates a new anonymous signature list
      requestBody:
        description: Object containing info for signature list
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - campaignCode
              properties:
                campaignCode:
                  type: string
      responses:
        '200':
          description: Already existing signature list found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  signatureList:
                    type: object
                    description: List object containing id and url to pdf
                    properties:
                      id:
                        type: string
                      url:
                        type: string
        '201':
          description: New signature list created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  signatureList:
                    type: object
                    description: List object containing id and url to pdf
                    properties:
                      id:
                        type: string
                      url:
                        type: string
        '401':
          description: User does not have newsletter consent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /signatures/{listId}:
    patch:
      summary: Updates a signature list (register signatures)
      parameters:
        - in: path
          name: listId
          schema:
            type: string
          required: true
          description: List id of the signature list to be changed
      requestBody:
        description: Object containing info about user and how many signatures to register
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - count
              properties:
                userId:
                  type: string
                email:
                  type: string
                count:
                  type: integer
      responses:
        '204':
          description: Signatures successfully registered
        '404':
          description: User or list not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /users:
    post:
      summary: Creates a new user
      requestBody:
        description: User object that is created
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - email
                - newsletterConsent
              properties:
                userId:
                  type: string
                email:
                  type: string
                newsletterConsent:
                  description: Subscription to general newsletter
                  type: boolean
                referral:
                  type: string
                name:
                  type: string
                city:
                  type: string
                zipCode:
                  type: string
                source:
                  type: string
                ags:
                  type: string
                  description: If user should be signed up for municipality
                customNewsletters:
                  description: If omitted, newsletter settings will be configured on the basis of the ags. Will override existing newsletter settings.
                  type: array
                  items:
                    properties:
                      name:
                        type: string
                        description: Name of the municipality or the state
                        required: true
                      value:
                        type: boolean
                        required: true
                      extraInfo:
                        type: boolean
                        required: true
                      ags:
                        type: string
                        description: Is empty if the newsletter is for a state (SH and BB)
                      timestamp:
                        type: string
                        description: In iso format
                        required: true
                wantsToCollect:
                  type: object
                  description: Should either include inGeneral or meetup if it should be saved that the user either wants to collect in general or at a specific event.
                  properties:
                    inGeneral:
                      type: boolean
                    meetup:
                      type: object
                      description: Must have location and date, but can also include anything else
                      properties:
                        location:
                          type: string
                          required: true
                        date:
                          type: string
                          required: true
      responses:
        '201':
          description: User was successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    description: User object only containing user id
                    properties:
                      userId:
                        type: string
        '401':
          description: User already exists and cannot be overwritten
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /users/external-signup:
    post:
      summary: Creates a new user from an external source
      security:
        - ParamApiKeyAuth: []
      requestBody:
        description: User object that is going to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - ags
                - optedIn
                - isEngaged
              properties:
                email:
                  type: string
                username:
                  type: string
                  description: Must be at least 3 chars
                ags:
                  type: string
                optedIn:
                  type: boolean
                isEngaged:
                  type: boolean
                loginToken:
                  type: string
                  description: Token to later use for login, key can not be defined or value null
                userToken:
                  type: string
                  description: MGE specific token, key can not be defined or value null
                phone:
                  type: string
                  description: Key can not be defined or value null, must be at least 6 digits
      responses:
        '201':
          description: User was successfully created or municipality was added to existing user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    description: Object only containing user id
                    properties:
                      userId:
                        type: string
        '200':
          description: User had already signed up for this municipality
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    description: Object only containing user id
                    properties:
                      userId:
                        type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Query token not provided or incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /users/{userId}:
    get:
      summary: Gets user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User id of user who should be retrieved
      responses:
        '200':
          description: User successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      profilePictures:
                        type: object
                        description: Object containing links to images in various sizes
                        properties:
                          '200':
                            type: string
                          '500':
                            type: string
                          '900':
                            type: string
                          '1200':
                            type: string
                          original:
                            type: string
                      interactions:
                        type: array
                        items:
                          type: object
                          properties:
                            body:
                              type: string
                              description: Text of the interaction
                            timestamp:
                              type: string
                      hasZipCode:
                        type: boolean
                      email:
                        type: string
                        description: Anonymized email address
                      username:
                        type: string
                      municipalities:
                        type: array
                        items:
                          type: object
                          properties:
                            ags:
                              type: string
                            createdAt:
                              type: string
                            population:
                              type: number
                            name:
                              type: string
                            slug:
                              type: string
                              description: The slug to open the page of this specific municipality
                            userId:
                              type: string
                              description: This is kinda redundant in this case but is due to the fact that we got the array from the userId - ags table
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
    patch:
      summary: Updates a user
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User id of user whom should be updated
      requestBody:
        description: For now only newsletter consent, zip code, username and city can be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ags:
                  type: string
                  description: If user should be signed up for municipality
                newsletterConsent:
                  description: Subscription to general newsletter
                  type: boolean
                reminderMails:
                  description: Subscription to automated mails
                  type: boolean
                zipCode:
                  type: string
                username:
                  type: string
                city:
                  type: string
                confirmed:
                  type: boolean
                removeToken:
                  type: boolean
                  description: If this flag is set the custom token will be removed from the user
                code:
                  type: string
                  description: The code used for double opt in, needs to be saved when confirming user
                lottery:
                  type: string
                  description: Identifier of the lottery campaign (e.g. just the year '2021')
                donation:
                  type: object
                  required:
                    - amount
                    - recurring
                    - firstName
                    - lastName
                    - iban
                  properties:
                    cancel:
                      type: boolean
                      description: If this flag is set to true, the recurring donation will be cancelled. If set, the other required fields are not required.
                    amount:
                      type: number
                    recurring:
                      type: boolean
                    firstName:
                      type: string
                    lastName:
                      type: string
                    iban:
                      type: string
                      description: Needs to be a valid iban, will be validated
                    yearly:
                      type: boolean
                      description: Only relevant if donation is recurring. Should be true if donation is supposed to yearly, not monthly

                customNewsletters:
                  description: Array holding information about the newsletters the user is subscribed to
                  type: array
                  items:
                    properties:
                      name:
                        type: string
                        description: Name of the municipality or the state
                        required: true
                      value:
                        type: boolean
                        required: true
                      extraInfo:
                        type: boolean
                        required: true
                      ags:
                        type: string
                        description: Is empty if the newsletter is for a state (SH and BB)
                      timestamp:
                        type: string
                        description: In iso format
                        required: true
                updatedOnXbge:
                  type: boolean
                store:
                  type: object
                  description: Can contain any key. All keys will be added to existing store. If a key already exists it will be overwritten.
                listFlow:
                  type: object
                  description: Can contain any key. All keys will be added to existing list flow. If a key already exists it will be overwritten.
                wantsToCollect:
                  type: object
                  description: Should either include inGeneral or meetup if it should be saved that the user either wants to collect in general or at a specific event.
                  properties:
                    inGeneral:
                      type: boolean
                    meetup:
                      type: object
                      description: Must have location and date, but can also include anything else
                      properties:
                        location:
                          type: string
                          required: true
                        date:
                          type: string
                          required: true
      responses:
        '204':
          description: User was successfully updated
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
    delete:
      summary: Delete user (in dynamo and cognito)
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User id of user who should be deleted
      responses:
        '204':
          description: User successfully deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /users/me:
    get:
      summary: Gets current authenticated user
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: User successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    description: User object containing everything
                    properties:
                      cognitoId:
                        type: string
                      email:
                        type: string
                      createdAt:
                        type: string
                      updatedAt:
                        type: string
                      referral:
                        type: string
                      username:
                        type: string
                      city:
                        type: string
                      zipCode:
                        type: string
                      newsletterConsent:
                        type: object
                        properties:
                          value:
                            type: boolean
                          timestamp:
                            type: string
                      reminderMails:
                        type: object
                        properties:
                          value:
                            type: boolean
                          timestamp:
                            type: string
                      customNewsletters:
                        description: Array holding information about the newsletters the user is subscribed to
                        type: array
                        items:
                          properties:
                            name:
                              type: string
                              description: Name of the municipality or the state
                            value:
                              type: boolean
                            extraInfo:
                              type: boolean
                            ags:
                              type: string
                              description: Is empty if the newsletter is for a state (SH and BB)
                            timestamp:
                              type: string
                              description: In iso format
                      pledges:
                        type: array
                        items:
                          type: object
                          properties:
                            createdAt:
                              type: string
                            signatureCount:
                              type: integer
                            campaign:
                              type: object
                              properties:
                                round:
                                  type: integer
                                state:
                                  type: string
                                code:
                                  type: string
                      scannedLists:
                        type: array
                        items:
                          type: object
                          properties:
                            count:
                              type: integer
                            timestamp:
                              type: string
                            listId:
                              type: string
                            campaign:
                              type: object
                              properties:
                                round:
                                  type: integer
                                state:
                                  type: string
                                code:
                                  type: string
                      signatureCampaigns:
                        type: array
                        items:
                          type: object
                          properties:
                            round:
                              type: integer
                            state:
                              type: string
                            code:
                              type: string
                      surveys:
                        type: array
                        items:
                          type: object
                          properties:
                            answer:
                              type: string
                            code:
                              type: string
                            timestamp:
                              type: string
                      profilePictures:
                        type: object
                        description: Object containing links to images in various sizes
                        properties:
                          '200':
                            type: string
                          '500':
                            type: string
                          '900':
                            type: string
                          '1200':
                            type: string
                          original:
                            type: string
                      interactions:
                        type: array
                        items:
                          type: object
                          properties:
                            body:
                              type: string
                              description: Text of the interaction
                            timestamp:
                              type: string
                      donations:
                        type: object
                        properties:
                          recurringDonation:
                            type: object
                            properties:
                              firstName:
                                type: string
                              lastName:
                                type: string
                              iban:
                                type: string
                              createdAt:
                                type: string
                              updatedAt:
                                type: string
                              amount:
                                type: number
                          onetimeDonations:
                            type: array
                            items:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                lastName:
                                  type: string
                                iban:
                                  type: string
                                createdAt:
                                  type: string
                                amount:
                                  type: number
                                id:
                                  type: string
                      municipalities:
                        type: array
                        items:
                          type: object
                          properties:
                            ags:
                              type: string
                            createdAt:
                              type: string
                            population:
                              type: number
                            name:
                              type: string
                            slug:
                              type: string
                              description: The slug to open the page of this specific municipality
                            userId:
                              type: string
                              description: This is kinda redundant in this case but is due to the fact that we got the array from the userId - ags table
                      referredUsers:
                        description: Other users which signed up because this user shared, array of userIds
                        type: array
                        items:
                          type: string
                      lottery:
                        type: object
                        properties:
                          year:
                            type: string
                          id:
                            type: string
                          timestamp:
                            type: string
                      wantsToCollect:
                        type: object
                        properties:
                          meetups:
                            type: array
                            description: Events to which the user has signed up for
                            items:
                              type: object
                              description: Includes date, location and timestamp and possible anything else
                              properties:
                                location:
                                  type: string
                                date:
                                  type: string
                                timestamp:
                                  type: string
                          inGeneral:
                            type: boolean
                          createdAt:
                            type: string
                          updatedAt:
                            type: string

        '401':
          description: Not authorized to get user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /users/{userId}/signatures:
    post:
      summary: Creates a new signature list for a user
      description: The newsletter consent is set to true when calling this endpoint
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User id for whom we create a signature list
      requestBody:
        description: Object containing info for signature list
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - campaignCode
              properties:
                campaignCode:
                  type: string
      responses:
        '200':
          description: Already existing signature list found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  signatureList:
                    type: object
                    description: List object containing id and url to pdf
                    properties:
                      id:
                        type: string
                      url:
                        type: string
        '201':
          description: New signature list created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  signatureList:
                    type: object
                    description: List object containing id and url to pdf
                    properties:
                      id:
                        type: string
                      url:
                        type: string
        '401':
          description: User is not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /users/{userId}/interactions:
    post:
      summary: Creates a new interaction for a specific user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User id of user for whom a interaction should be created
      requestBody:
        description: interaction object that is added
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                body:
                  type: string
                type:
                  type: string
                campaignCode:
                  type: string
      responses:
        '201':
          description: interaction was successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  interaction:
                    type: object
                    properties:
                      body:
                        type: string
                      type:
                        type: string
                      campaignCode:
                        type: string
                      createdAt:
                        type: string
                      id:
                        type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /users/{userId}/interactions/{interactionId}:
    post:
      summary: Updates an existing interaction for a specific user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User id of user for whom a interaction should be updated
        - in: path
          name: interactionId
          schema:
            type: string
          required: true
          description: Id of interaction to be updated
      requestBody:
        description: Key/values which should be updated. You can also add any other new key.
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              properties:
                body:
                  type: string
                type:
                  type: string
                campaignCode:
                  type: string
      responses:
        '204':
          description: interaction was successfully updated
        '404':
          description: User or interaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /users/{userId}/surveys:
    post:
      summary: Creates a survey answer for a specific user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User id of user for whom a survey answer should be created
      requestBody:
        description: Survey object that is created
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - surveyCode
                - answer
              properties:
                surveyCode:
                  type: string
                answer:
                  type: string
      responses:
        '201':
          description: Survey answer was successfully created
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Cannot create answer for same survey twice
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /users/unsubscribe-callback:
    post:
      summary: Mailjet callback to unsubscribe user
      description: Special api function to serve as callback for (mailjet unsubscribe event)[https://dev.mailjet.com/email/guides/webhooks/]
      security:
        - BasicAuth: []
      requestBody:
        description: Event array coming from mailjet
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  email:
                    type: string
      responses:
        '200':
          description: User succesfully updated
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /users/email-activity-callback:
    post:
      summary: Mailjet callback to update user if they opened or clicked an email
      description: Special api function to serve as callback for (mailjet events)[https://dev.mailjet.com/email/guides/webhooks/]
      security:
        - BasicAuth: []
      requestBody:
        description: Event array coming from mailjet
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  email:
                    type: string
                  event:
                    type: string
      responses:
        '200':
          description: User succesfully updated
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /users/{userId}/pledges:
    post:
      summary: Creates a new pledge and a new user
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User id of user whose pledges should be updated
      requestBody:
        description: Pledge object that is created
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pledgeId
              properties:
                pledgeId:
                  type: string
                signatureCount:
                  type: integer
                message:
                  type: string
      responses:
        '201':
          description: Pledge was successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: string
                  pledge:
                    type: object
                    description: Object containing newly created pledge
                    properties:
                      createdAt:
                        type: string
                      signatureCount:
                        type: integer
                      campaign:
                        type: object
                        properties:
                          round:
                            type: integer
                          state:
                            type: string
                          code:
                            type: string
        '401':
          description: Pledge and user cannot be created twice
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

    patch:
      summary: Updates user by adding a new pledge
      description: If a pledge for the passed pledgeId already exists it is updated, if not a new pledge is created
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User id of user whose pledges should be updated
      requestBody:
        description: Pledge object that is added
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pledgeId
              properties:
                pledgeId:
                  type: string
                signatureCount:
                  type: integer
                message:
                  type: string
      responses:
        '204':
          description: Pledge was successfully added to user
        '401':
          description: Not authorized to update pledges
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /interactions:
    get:
      summary: Get all interactions (of a certain type if parameter is passed)
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: If passed only this number of interactions will be returned. Default is 10.
        - in: query
          name: type
          schema:
            type: string
          description: If passed only interactions with this type will be passed
        - in: query
          name: campaignCode
          schema:
            type: string
          description: If passed only interactions with this campaign code will be passed
      responses:
        '200':
          description: Interactions successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  interactions:
                    type: array
                    items:
                      type: object
                      properties:
                        body:
                          type: string
                        createdAt:
                          type: string
                        updatedAt:
                          type: string
                        type:
                          type: string
                        user:
                          type: object
                          properties:
                            username:
                              type: string
                            profilePictures:
                              type: object
                              description: Object containing links to images in various sizes
                              properties:
                                '200':
                                  type: string
                                '500':
                                  type: string
                                '900':
                                  type: string
                                '1200':
                                  type: string
                                original:
                                  type: string
                            city:
                              type: string
                              description: The city is computed based on the zip code (could be refactored to use municipality structure)
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /admin/users:
    post:
      summary: Creates a new user or multiple users as admin
      security:
        - AdminApiKeyAuth: []
      requestBody:
        description: User object that is created
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - campaignCode
                - emails
              properties:
                campaignCode:
                  type: string
                emails:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Users were successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Not authorized to create user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
    get:
      summary: Gets list of power users
      security:
        - AdminApiKeyAuth: []
      parameters:
        - in: query
          name: minimum
          schema:
            type: integer
          description: Users who have sent or registered more than minimum will be retrieved
      responses:
        '200':
          description: Users successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                        email:
                          type: string
                        stillExists:
                          type: boolean
                        newsletterConsent:
                          type: object
                          properties:
                            value:
                              type: boolean
                            timestamp:
                              type: string
                        username:
                          type: string
                        signatureCount:
                          type: object
                          properties:
                            keyOfCampaign:
                              description: Object containing signature counts for a campaign (key will be something like berlin-1)
                              type: object
                              properties:
                                received:
                                  type: integer
                                  description: Count of received signatures
                                scannedByUser:
                                  type: integer
                                  description: Count of signatures registered by user
        '401':
          description: Not authorized to get users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /admin/users/{userId}:
    patch:
      summary: Updates user as an admin
      description: So far you can only unsubscribe user or cancel donation.
      security:
        - AdminApiKeyAuth: []
      requestBody:
        description: Basically the action that should be invoked
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                donation:
                  type: object
                  properties:
                    cancel:
                      type: boolean
                newsletterConsent:
                  type: boolean
                  description: Should only be false, if true nothing happens.
      responses:
        '204':
          description: User was successfully updated
        '401':
          description: Not authorized to update user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
    delete:
      summary: Deletes user as an admin
      description: User is deleted in Cognito and Dynamo
      security:
        - AdminApiKeyAuth: []
      responses:
        '204':
          description: User was successfully deleted
        '401':
          description: Not authorized to delete user
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /admin/signatures/{listId}:
    patch:
      summary: Updates a signature list as an admin
      description: Through this endpoint received signatues can be registered
      security:
        - AdminApiKeyAuth: []
      parameters:
        - in: path
          name: listId
          schema:
            type: string
          required: true
          description: List id of the signature list to be changed
      requestBody:
        description: Object containing info about user and how many signatures to register
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - count
                - mixed
              properties:
                count:
                  type: integer
                mixed:
                  type: boolean
      responses:
        '200':
          description: Signatures successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAnonymous:
                    type: boolean
                    description: Signature list was downloaded anonymously
                  mailMissing:
                    type: boolean
                    description: Signature list was created as part of sending letters, recipient did not enter email address because of bug
        '404':
          description: List not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /admin/donations:
    get:
      summary: Gets list of donations
      security:
        - AdminApiKeyAuth: []
      responses:
        '200':
          description: Donations successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  donations:
                    type: object
                    properties:
                      recurringDonations:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            amount:
                              type: number
                            firstName:
                              type: string
                            lastName:
                              type: string
                            iban:
                              type: string
                            createdAt:
                              type: string
                            updatedAt:
                              type: string
                            cancelledAt:
                              type: string
                            firstDebitDate:
                              type: string
                      onetimeDonations:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            amount:
                              type: number
                            firstName:
                              type: string
                            lastName:
                              type: string
                            iban:
                              type: string
                            createdAt:
                              type: string
                            debitDate:
                              type: string
        '401':
          description: Not authorized to get users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /admin/collectors:
    get:
      summary: Gets list of collectors
      security:
        - AdminApiKeyAuth: []
      responses:
        '200':
          description: Collectors successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  inGeneral:
                    type: array
                    description: Array of users who want to collect in general, see "Gets current authenticated user" for attributes
                  meetups:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                        location:
                          type: string
                        collectors:
                          type: array
                          description: Array of users who want to attend event, see "Gets current authenticated user" for attributes
        '401':
          description: Not authorized to get users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /images/upload-url:
    post:
      summary: Create a signed url to upload image
      security:
        - AdminApiKeyAuth: []
      requestBody:
        description: Object containing info for image
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - contentType
              properties:
                userId:
                  type: string
                contentType:
                  type: string
                  description: Content type of image (e.g. image/png)
      responses:
        '201':
          description: Upload url successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploadUrl:
                    type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /analytics/signatures?queryParam:
    get:
      summary: Gets signature counts for one user
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          description: User id for whom we want to get the signature count
        - in: query
          name: email
          schema:
            type: string
          description: Email of user for whom we want to get the signature count
        - in: query
          name: listId
          schema:
            type: string
          description: List id which should belong to a user for whom we want to get the signature count
      responses:
        '200':
          description: Signature count successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  received:
                    type: integer
                    description: Count of received signatures
                  scannedByUser:
                    type: integer
                    description: Count of signatures registered by user
                  receivedList:
                    type: array
                    description: Array of scan objects for received signatures
                    items:
                      type: object
                      properties:
                        count:
                          type: integer
                        mixed:
                          type: boolean
                        timestamp:
                          type: string
                        campaign:
                          type: object
                          properties:
                            round:
                              type: integer
                            state:
                              type: string
                            code:
                              type: string
                  scannedByUserList:
                    type: array
                    description: Array of scan objects for signatures registered by user
                    items:
                      type: object
                      properties:
                        listId:
                          type: string
                        count:
                          type: integer
                        mixed:
                          type: boolean
                        timestamp:
                          type: string
                        campaign:
                          type: object
                          properties:
                            round:
                              type: integer
                            state:
                              type: string
                            code:
                              type: string
        '404':
          description: List or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /analytics/signatures:
    get:
      summary: Gets signature counts for all campaigns
      responses:
        '200':
          description: Signature count successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  keyOfCampaign:
                    description: Object containing signature counts for a campaign (key will be something like berlin-1)
                    type: object
                    properties:
                      withoutMixed:
                        type: integer
                      withMixed:
                        type: integer
                      scannedByUser:
                        type: integer
                      computed:
                        type: integer
                      withContentful:
                        type: integer
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /analytics/signatures/history:
    get:
      summary: Get history of registered signatures
      parameters:
        - in: query
          name: start
          schema:
            type: string
          description: Date (YYYY-MM-DD) when the history should start, if not provided 6 weeks ago
        - in: query
          name: end
          schema:
            type: string
          description: Date (YYYY-MM-DD) when the history should end, if not provided now
      responses:
        '200':
          description: Signature history successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  keyOfCampaign:
                    type: object
                    description: Object containing history for a campaign (key will be something like berlin-1)
                    properties:
                      day:
                        type: string
                      downloads:
                        type: integer
                      usersWhoScanned:
                        type: integer
                      received:
                        type: integer
                      scanned:
                        type: integer
                      scannedLists:
                        type: integer
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /analytics/users:
    get:
      summary: Get user count for all campaigns
      responses:
        '200':
          description: User count successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: object
                    properties:
                      verifiedUsers:
                        type: integer
                      unverifiedUsers:
                        type: integer
                  keyOfCampaign:
                    description: Object containing user count for a campaign (key will be something like berlin-1)
                    type: object
                    properties:
                      verifiedUsers:
                        type: object
                        properties:
                          count:
                            type: integer
                          signatures:
                            type: integer
                            description: Pledged signatures
                          pledges:
                            type: integer
                            description: Count of pledges
                          downloaders:
                            type: integer
                            description: Count of users who downloaded a list
                      unverifiedUsers:
                        type: object
                        properties:
                          count:
                            type: integer
                      usersWithNewsletterConsent:
                        type: object
                        properties:
                          count:
                            type: integer
                          signatures:
                            type: integer
                            description: Pledged signatures
                          pledges:
                            type: integer
                            description: Count of pledges
                          downloaders:
                            type: integer
                            description: Count of users who downloaded a list
                      pledgesMap:
                        type: object
                        description: Maps the count of people who have pledged a specific number of signatures to that number
                        properties:
                          keyOfSignatureCount:
                            type: integer
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /analytics/active-users:
    get:
      summary: Gets count of active users
      responses:
        '200':
          description: Count successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      count:
                        type: string
                        description: Total count
                      emailActivityCount:
                        type: string
                        description: Count of users who were active in the context of emails
                      websiteActivityCount:
                        type: string
                        description: Count of users who were active on the website
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /analytics/signatures/lists:
    get:
      summary: Gets signature list counts for all campaigns
      responses:
        '200':
          description: List count successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  keyOfCampaign:
                    type: object
                    description: Object containing list counts for a campaign (key will be something like berlin-1)
                    properties:
                      total:
                        type: object
                        properties:
                          lists:
                            type: integer
                          downloads:
                            type: integer
                      anonymous:
                        type: object
                        properties:
                          lists:
                            type: integer
                          downloads:
                            type: integer
                      byUser:
                        type: object
                        properties:
                          lists:
                            type: integer
                          downloads:
                            type: integer
                      withMixed:
                        type: integer
                      scannedByUser:
                        type: integer
                      computed:
                        type: integer
                      withContentful:
                        type: integer
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /analytics/municipalities/{ags}:
    get:
      summary: Gets statistics for one municipalities
      description: Takes ags as path param to get stats for a specific municipality
      parameters:
        - in: path
          name: ags
          schema:
            type: string
          description: Allgemeiner Gemeindeschlüssel to get stats for specific municipality
          required: true
      responses:
        '200':
          description: Stats successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      signups:
                        type: integer
                        description: Count of signups
                      percentToGoal:
                        type: number
                        description: Percentage of the goal which is already reached
                      goal:
                        type: integer
                        description: Goal which is aimed at for this municipality
        '404':
          description: Municipality was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /analytics/municipalities:
    get:
      summary: Gets statistics for all municipalities
      parameters:
        - in: query
          name: all
          description: Pass e.g. true (or any other string, we just check if the param is there). If param is set all municipalities including goals will be returned.
      responses:
        '200':
          description: Stats successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      events:
                        description: Municipalities with special events (reached goal, big growth, first signups), not returned if query param "all" is set.
                        type: array
                        items:
                          type: object
                          properties:
                            signups:
                              type: array
                              description: Array of length 2, first value is previous and second value is current number of signups
                              items:
                                type: number
                            ags:
                              type: string
                            category:
                              type: string
                              description: Either "win", "change" or "new"
                      municipalities:
                        type: array
                        description: All municipalites with signups (munic. with no signups only included if query param "all" is set)
                        items:
                          type: object
                          properties:
                            signups:
                              type: number
                            ags:
                              type: string
                            goal:
                              type: number
                              description: Will only be returned if query param "all" is set
                      timePassed:
                        type: number
                        description: Setting of the timespan which is used to check for events, in ms
                      scale:
                        type: array
                        description: Setting of scale for visualisation in map in form [[x1,x2],[y1,y2]]
                        items:
                          type: array
                          items:
                            type: number
                      summary:
                        type: object
                        properties:
                          users:
                            type: number
                          municipalities:
                            type: number
                          timestamp:
                            type: string
                          previous:
                            description: The numbers x minutes ago.
                            type: object
                            properties:
                              users:
                                type: number
                              municipalities:
                                type: number
                              timestamp:
                                type: string

        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /municipalities:
    get:
      summary: Gets all municipalities
      responses:
        '200':
          description: Municipalities successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        longitude:
                          type: integer
                        latitude:
                          type: integer
                        ags:
                          type: string
                          description: Allgemeiner Gemeindeschlüssel as key for municipality (unique in this dataset)
                        name:
                          type: string
                        zipCodes:
                          type: array
                          description: Every zip code existing in this municipality (same zip code can exist in other munic.)
                          items:
                            type: string
                        district:
                          type: string
                          description: Landkreis
                        state:
                          type: string
                          description: Bundesland
                        population:
                          type: number
                        goal:
                          type: number
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /municipalities/{ags}:
    get:
      summary: Gets info (without stats) for one municipalities
      description: Takes ags as path param to get info for a specific municipality
      parameters:
        - in: path
          name: ags
          schema:
            type: string
          description: Allgemeiner Gemeindeschlüssel to get specific municipality
          required: true
      responses:
        '200':
          description: Municipality successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      ags:
                        type: string
                        description: Ags of municipality
                      name:
                        type: string
                        description: Name of municipality
                      slug:
                        type: string
                        description: Slug to form link to municipality page
                      population:
                        type: number
                        description: Population of municipality
                      goal:
                        type: integer
                        description: Goal which is aimed at for this municipality

  /vouchers:
    get:
      summary: Gets list of sold vouchers
      security:
        - BasicAuth: []
      parameters:
        - in: query
          name: safeAddress
          schema:
            type: string
          description: If passed only vouchers sold to this safeAddress are returned
        - in: query
          name: timestamp
          schema:
            type: string
          description: Timestamp as iso string. Only vouchers sold after this date are returned.
      responses:
        '200':
          description: Vouchers successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        providerId:
                          type: string
                        amount:
                          type: number
                        code:
                          type: string
                        name:
                          type: string
                        sold:
                          type: object
                          properties:
                            safeAddress:
                              type: string
                            timestamp:
                              type: string
                            transactionId:
                              type: string
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

    post:
      summary: Purchase voucher of specific provider
      security:
        - BasicAuth: []
      requestBody:
        description: Object containing voucher info
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - providerId
                - safeAddress
                - amount
                - transactionId
              properties:
                providerId:
                  type: string
                amount:
                  type: number
                safeAddress:
                  type: string
                transactionId:
                  type: string
      responses:
        '200':
          description: Voucher successfully purchased
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      providerId:
                        type: string
                      amount:
                        type: number
                      code:
                        type: string
                      name:
                        type: string
                      sold:
                        type: object
                        properties:
                          safeAddress:
                            type: string
                          timestamp:
                            type: string
                          transactionId:
                            type: string
        '400':
          description: Error in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Forbidden due to limit
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: No vouchers with the passed amount found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /vouchers/providers:
    get:
      summary: Gets list of providers and their count of available vouchers
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Providers successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        shopUrl:
                          type: string
                        logoUrl:
                          type: string
                        availableOffers:
                          type: array
                          items:
                            type: object
                            properties:
                              amount:
                                type: number
                              countAvailable:
                                type: integer
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
