service: ubi-serverless

# custom variables
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # The table name is based on the stage we are deploying to
  usersTableName: ${self:custom.stage}-users
  signaturesTableName: ${self:custom.stage}-signatures

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-central-1

# These environment variables are made available to our functions
# under process.env.
environment:
  usersTableName: ${self:custom.usersTableName}
  signaturesTableName: ${self:custom.signaturesTableName}

plugins:
  - serverless-iam-roles-per-function

# no global iam policies, because we want to follow the least privilege princilpe
# therefore we use a plugin to define roles per function

functions:
  createPledge:
    handler: src/api/pledges/createPledge/index.handler
    events:
      - http:
          path: pledges
          method: post
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  createSignatureList:
    handler: src/api/signatures/createSignatureList/index.handler
    events:
      - http:
          path: signatures
          method: post
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]
      - Effect: 'Allow'
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource: 'arn:aws:ses:eu-central-1:550953582247:identity/support@expedition-grundeinkommen.de'
      - Effect: 'Allow'
        Action:
          - s3:PutObject
          - s3:PutObjectAcl
        Resource: 'arn:aws:s3:::signature-lists/*'

  updateUser:
    handler: src/api/users/updateUser/index.handler
    events:
      - http:
          path: users/{userId}
          method: patch
          cors: true
          request:
            parameters:
              paths:
                userId: true # not optional
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  sendVerificationMail:
    handler: src/triggers/sendVerificationMail/index.handler
    events:
      - cognitoUserPool:
          pool: UserPool
          trigger: CustomMessage
    iamRoleStatments:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  pinpointOptIn:
    handler: src/triggers/pinpointOptIn/index.handler
    events:
      - cognitoUserPool:
          pool: UserPool
          trigger: PostConfirmation
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow'
        Action:
          - mobiletargeting:*
        Resource: 'arn:aws:mobiletargeting:*:550953582247:*'

  updatePinpoint:
    handler: src/triggers/updatePinpoint/index.handler
    events: # dynamodb trigger through a dynamo stream
      - stream:
          type: dynamodb
          arn:
            'Fn::GetAtt': [UsersTable, StreamArn]
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetShardIterator
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          - dynamodb:ListStreams
        Resource:
          - 'Fn::GetAtt': [UsersTable, StreamArn]
      - Effect: 'Allow'
        Action:
          - mobiletargeting:*
        Resource: 'arn:aws:mobiletargeting:*:550953582247:*'

  sendCongratulationMails:
    handler: src/triggers/sendCongratulationMails/index.handler
    events: # Call this function every day at 8 (via cloudwatch event)
      - schedule: cron(0 19 * * ? *)
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]
      - Effect: 'Allow'
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource: 'arn:aws:ses:eu-central-1:550953582247:identity/support@expedition-grundeinkommen.de'

  # Admin cognito auth triggers

  createAuthChallenge:
    handler: src/triggers/auth/createAuthChallenge/index.handler
    events:
      - cognitoUserPool:
          pool: AdminUserPool
          trigger: CreateAuthChallenge

  defineAuthChallenge:
    handler: src/triggers/auth/defineAuthChallenge/index.handler
    events:
      - cognitoUserPool:
          pool: AdminUserPool
          trigger: DefineAuthChallenge

  preSignUp:
    handler: src/triggers/auth/preSignUp/index.handler
    events:
      - cognitoUserPool:
          pool: AdminUserPool
          trigger: PreSignUp

  verifyAuthChallengeResponse:
    handler: src/triggers/auth/verifyAuthChallengeResponse/index.handler
    events:
      - cognitoUserPool:
          pool: AdminUserPool
          trigger: VerifyAuthChallengeResponse

# CloudFormation resource templates
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: cognitoId
            AttributeType: S
        KeySchema:
          - AttributeName: cognitoId
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        BillingMode: PAY_PER_REQUEST

    SignaturesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.signaturesTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # General user pool
    UserPool:
      Type: AWS::Cognito::UserPool
      # Generate a name based on the stage
      UserPoolName: ${self:custom.stage}-user-pool
      # Set email as an alias
      UsernameAttributes:
        - email
        - phone_number
      AutoVerifiedAttributes:
        - email
        - phone_number

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:custom.stage}-user-pool-client
        UserPoolId:
          Ref: UserPool
        GenerateSecret: false

    # Admin user pool
    AdminUserPool:
      Type: AWS::Cognito::UserPool
      # Generate a name based on the stage
      UserPoolName: ${self:custom.stage}-admin-pool
      # Set email as an alias
      UsernameAttributes:
        - email
        - phone_number
      AutoVerifiedAttributes:
        - email
        - phone_number

    AdminUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:custom.stage}-admin-pool-client
        AdminUserPoolId:
          Ref: AdminUserPool
        ExplicitAuthFlows:
          - ALLOW_CUSTOM_AUTH
        GenerateSecret: false

# Print out the Id of the User Pool that is created
Outputs:
  UserPoolId:
    Value:
      Ref: UserPool

  UserPoolClientId:
    Value:
      Ref: UserPoolClient

  AdminUserPoolId:
    Value:
      Ref: AdminUserPool

  AdminUserPoolClientId:
    Value:
      Ref: AdminUserPoolClient
