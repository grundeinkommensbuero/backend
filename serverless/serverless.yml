service: ubi-serverless

package:
  individually: true

# custom variables
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # The table name is based on the stage we are deploying to
  usersTableName: ${self:custom.stage}-users
  signaturesTableName: ${self:custom.stage}-signatures

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-central-1
  memorySize: 512 # Overwrite the default memory size. Default is 1024
  timeout: 10
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    USERS_TABLE_NAME: ${self:custom.usersTableName}
    SIGNATURES_TABLE_NAME: ${self:custom.signaturesTableName}
    STAGE: ${self:custom.stage}
    IMAGE_BUCKET: xbge-profile-pictures

plugins:
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-plugin-split-stacks # needed because of the 200 resources limit

# no global iam policies, because we want to follow the least privilege princilpe
# therefore we use a plugin to define roles per function

functions:
  createPledge:
    handler: src/api/pledges/createPledge/index.handler
    events:
      - http:
          path: pledges
          method: post
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  updatePledge:
    handler: src/api/pledges/updatePledge/index.handler
    events:
      - http:
          path: pledges/{userId}
          method: patch
          cors: true
          request:
            parameters:
              paths:
                userId: true # not optional
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  createSignatureList:
    handler: src/api/signatures/createSignatureList/index.handler
    events:
      - http:
          path: signatures
          method: post
          cors: true
    memorySize: 1600 # memorySize for this specific function.
    timeout: 12 # Timeout for this specific function.
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow' # for the global secondary index
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - '/'
              - - { 'Fn::GetAtt': ['UsersTable', 'Arn'] }
                - 'index/emailIndex'
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]
      - Effect: 'Allow'
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource: 'arn:aws:ses:eu-central-1:550953582247:identity/support@expedition-grundeinkommen.de'
      - Effect: 'Allow'
        Action:
          - s3:PutObject
          - s3:PutObjectAcl
        Resource: 'arn:aws:s3:::signature-lists/*'
      - Effect: 'Allow' # for the global secondary index of signatures table
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - '/'
              - - { 'Fn::GetAtt': ['SignaturesTable', 'Arn'] }
                - 'index/userIdIndex'

  createSignatureListAuth:
    handler: src/api/signatures/createSignatureList/index.handler
    events:
      - http:
          path: users/{userId}/signatures
          method: post
          cors: true
          request:
            parameters:
              paths:
                userId: true # not optional
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    memorySize: 1600 # memorySize for this specific function.
    timeout: 12 # Timeout for this specific function.
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow' # for the global secondary index
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - '/'
              - - { 'Fn::GetAtt': ['UsersTable', 'Arn'] }
                - 'index/emailIndex'
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]
      - Effect: 'Allow'
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource: 'arn:aws:ses:eu-central-1:550953582247:identity/support@expedition-grundeinkommen.de'
      - Effect: 'Allow'
        Action:
          - s3:PutObject
          - s3:PutObjectAcl
        Resource: 'arn:aws:s3:::signature-lists/*'
      - Effect: 'Allow' # for the global secondary index of signatures table
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - '/'
              - - { 'Fn::GetAtt': ['SignaturesTable', 'Arn'] }
                - 'index/userIdIndex'

  updateSignatureList:
    handler: src/api/signatures/updateSignatureList/index.handler
    events:
      - http:
          path: signatures/{listId}
          method: patch
          cors: true
          request:
            parameters:
              paths:
                listId: true # not optional
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Scan
          - dynamodb:PutItem
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow' # for the global secondary index
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - '/'
              - - { 'Fn::GetAtt': ['UsersTable', 'Arn'] }
                - 'index/emailIndex'

  adminUpdateSignatureList:
    handler: src/api/signatures/adminUpdateSignatureList/index.handler
    events:
      - http:
          path: admin/signatures/{listId}
          method: patch
          cors: true
          request:
            parameters:
              paths:
                listId: true # not optional
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: AdminApiGatewayAuthorizer
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]

  getSignatureCount:
    handler: src/api/signatures/getSignatureCount/index.handler
    events:
      - http:
          path: analytics/signatures
          method: get
          cors: true
    memorySize: 1024 # memorySize for this specific function.
    timeout: 12 # Timeout for this specific function.
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow' # for the global secondary index
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - '/'
              - - { 'Fn::GetAtt': ['UsersTable', 'Arn'] }
                - 'index/emailIndex'
      - Effect: 'Allow' # for the global secondary index of signatures table
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - '/'
              - - { 'Fn::GetAtt': ['SignaturesTable', 'Arn'] }
                - 'index/userIdIndex'

  getSignatureHistory:
    handler: src/api/signatures/getSignatureHistory/index.handler
    events:
      - http:
          path: analytics/signatures/history
          method: get
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]

  getUserCount:
    handler: src/api/users/getUserCount/index.handler
    events:
      - http:
          path: analytics/users
          method: get
          cors: true
    environment:
      USER_POOL_ID:
        Ref: CognitoUserPoolUserPool
    timeout: 40 # Timeout for this specific function.
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource:
          - 'arn:aws:dynamodb:eu-central-1:550953582247:table/users-without-consent'
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow'
        Action:
          - cognito-idp:ListUsers
        Resource:
          - 'Fn::GetAtt': [CognitoUserPoolUserPool, Arn]

  getListCount:
    handler: src/api/signatures/getSignatureListCount/index.handler
    events:
      - http:
          path: analytics/signatures/lists
          method: get
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]

  createUser:
    handler: src/api/users/createUser/index.handler
    events:
      - http:
          path: users
          method: post
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Scan
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  getUser:
    handler: src/api/users/getUser/index.handler
    events:
      - http:
          path: users/{userId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                userId: true # not optional
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  getCurrentUser:
    handler: src/api/users/getCurrentUser/index.handler
    events:
      - http:
          path: users/me
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  createQuestion:
    handler: src/api/users/questions/createQuestion/index.handler
    events:
      - http:
          path: users/{userId}/questions
          method: post
          cors: true
          request:
            parameters:
              paths:
                userId: true # not optional
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  updateUser:
    handler: src/api/users/updateUser/index.handler
    events:
      - http:
          path: users/{userId}
          method: patch
          cors: true
          request:
            parameters:
              paths:
                userId: true # not optional
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  unsubscribeUser:
    handler: src/api/users/unsubscribeUser/index.handler
    events:
      - http:
          path: users/unsubscribe-callback
          method: post
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow' # for the global secondary index
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - '/'
              - - { 'Fn::GetAtt': ['UsersTable', 'Arn'] }
                - 'index/emailIndex'

  createSurveyAnswer:
    handler: src/api/users/createSurveyAnswer/index.handler
    events:
      - http:
          path: users/{userId}/surveys
          method: post
          cors: true
          request:
            parameters:
              paths:
                userId: true # not optional
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  adminCreateUser:
    handler: src/api/users/adminCreateUser/index.handler
    events:
      - http:
          path: admin/users
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: AdminApiGatewayAuthorizer
    environment:
      USER_POOL_ID:
        Ref: CognitoUserPoolUserPool
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:Scan
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow' # for the global secondary index
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - '/'
              - - { 'Fn::GetAtt': ['UsersTable', 'Arn'] }
                - 'index/emailIndex'
      - Effect: 'Allow'
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource: 'arn:aws:ses:eu-central-1:550953582247:identity/support@expedition-grundeinkommen.de'
      - Effect: 'Allow'
        Action:
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminSetUserPassword
        Resource:
          - 'Fn::GetAtt': [CognitoUserPoolUserPool, Arn]

  getPowerUsers:
    handler: src/api/users/getPowerUsers/index.handler
    events:
      - http:
          path: admin/users
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: AdminApiGatewayAuthorizer
    memorySize: 1024 # memorySize for this specific function.
    timeout: 30 # Timeout for this specific function.
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]

  sendVerificationMail:
    handler: src/triggers/auth/sendVerificationMail/index.handler
    events:
      - cognitoUserPool:
          pool: UserPool
          trigger: CustomMessage
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  deleteUnverified:
    handler: src/triggers/deleteUnverifiedUsers/index.handler
    events: # Call this function every day at 0 am (via cloudwatch event)
      - schedule: cron(0 23 * * ? *)
    timeout: 40 # Timeout for this specific function.
    environment:
      USER_POOL_ID:
        Ref: CognitoUserPoolUserPool
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - cognito-idp:ListUsers
          - cognito-idp:AdminDeleteUser
        Resource:
          - 'Fn::GetAtt': [CognitoUserPoolUserPool, Arn]
      - Effect: 'Allow'
        Action:
          - dynamodb:DeleteItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  onVerification:
    handler: src/triggers/auth/onVerification/index.handler
    events:
      - cognitoUserPool:
          pool: UserPool
          trigger: PostConfirmation
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]

  updateMailjetContact:
    handler: src/triggers/mailjet/updateMailjetContact/index.handler
    events: # dynamodb trigger through a dynamo stream
      - stream:
          type: dynamodb
          maximumRetryAttempts: 5
          arn:
            Fn::GetAtt: [UsersTable, StreamArn]
      - stream:
          type: dynamodb
          maximumRetryAttempts: 5
          arn:
            Fn::GetAtt: [SignaturesTable, StreamArn]
    environment:
      USER_POOL_ID:
        Ref: CognitoUserPoolUserPool
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetShardIterator
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          - dynamodb:ListStreams
        Resource:
          - 'Fn::GetAtt': [UsersTable, StreamArn]
      - Effect: 'Allow'
        Action:
          - mobiletargeting:*
        Resource: 'arn:aws:mobiletargeting:*:550953582247:*'
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]
      - Effect: 'Allow'
        Action:
          - cognito-idp:AdminGetUser
        Resource:
          - 'Fn::GetAtt': [CognitoUserPoolUserPool, Arn]
      - Effect: 'Allow' # for the global secondary index of signatures table
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - '/'
              - - { 'Fn::GetAtt': ['SignaturesTable', 'Arn'] }
                - 'index/userIdIndex'

  fillMailjet:
    handler: src/triggers/mailjet/fillMailjet/index.handler
    # events: # Call this function every day at 0 am (via cloudwatch event)
    #   - schedule: cron(0 23 * * ? *)
    timeout: 900 # Timeout for this specific function. Takes a while...
    memorySize: 2048 # memorySize for this specific function.
    environment:
      USER_POOL_ID:
        Ref: CognitoUserPoolUserPool
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - mobiletargeting:*
        Resource: 'arn:aws:mobiletargeting:*:550953582247:*'
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]
      - Effect: 'Allow'
        Action:
          - cognito-idp:ListUsers
        Resource:
          - 'Fn::GetAtt': [CognitoUserPoolUserPool, Arn]
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
          - lambda:InvokeAsync
        Resource: 'arn:aws:lambda:eu-central-1:550953582247:function:ubi-serverless-prod-fillMailjet'
      - Effect: 'Allow' # for the global secondary index of signatures table
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - '/'
              - - { 'Fn::GetAtt': ['SignaturesTable', 'Arn'] }
                - 'index/userIdIndex'

  sendCongratulationMails:
    handler: src/triggers/sendCongratulationMails/index.handler
    events: # Call this function every day at 8:30 (via cloudwatch event)
      - schedule: cron(30 19 * * ? *)
    memorySize: 2048 # memorySize for this specific function.
    timeout: 300 # Timeout for this specific function.
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]
      - Effect: 'Allow'
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource: 'arn:aws:ses:eu-central-1:550953582247:identity/support@expedition-grundeinkommen.de'

  requestImageUpload:
    handler: src/api/images/requestImageUpload/index.handler
    events:
      - http:
          path: images/upload-url
          method: post
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow'
        Action:
          - s3:PutObject
          - s3:PutObjectAcl
        Resource: 'arn:aws:s3:::xbge-profile-pictures/*'

  processUploadedImage:
    handler: src/triggers/processUploadedImage/index.handler
    events:
      - s3:
          bucket: xbge-profile-pictures
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: ${self:custom.stage}/originals/
    timeout: 30 # Timeout for this specific function.
    memorySize: 1600 # memorySize for this specific function.
    environment:
      S3_IMAGES_URL: https://xbge-profile-pictures.s3.eu-central-1.amazonaws.com
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:HeadObject
          - s3:PutObject
          - s3:PutObjectAcl
        Resource: 'arn:aws:s3:::xbge-profile-pictures/*'

  # getQuestions:
  #   handler: src/api/users/questions/getQuestions/index.handler
  #   events:
  #     - http:
  #         path: questions
  #         method: get
  #         cors: true
  #   iamRoleStatements:
  #     - Effect: 'Allow'
  #       Action:
  #         - dynamodb:Scan
  #       Resource:
  #         - 'Fn::GetAtt': [UsersTable, Arn]

  sendReminderMails:
    handler: src/triggers/sendReminderMails/index.handler
    timeout: 50 # Timeout for this specific function.
    events: # Call this function every day at 7 pm (via cloudwatch event)
      - schedule: cron(0 18 * * ? *)
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
        Resource:
          - 'Fn::GetAtt': [UsersTable, Arn]
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource:
          - 'Fn::GetAtt': [SignaturesTable, Arn]
      - Effect: 'Allow'
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource: 'arn:aws:ses:eu-central-1:550953582247:identity/support@expedition-grundeinkommen.de'

  getCrowdfundingData:
    handler: src/api/crowdfunding/getCrowdfundingData/index.handler
    events:
      - http:
          path: analytics/crowdfunding
          method: get
          cors: true

  # Admin cognito auth triggers

  createAuthChallenge:
    handler: src/triggers/auth/createAuthChallenge/index.handler
    events:
      - cognitoUserPool:
          pool: AdminUserPool
          trigger: CreateAuthChallenge
      - cognitoUserPool:
          pool: UserPool
          trigger: CreateAuthChallenge
    environment:
      SES_FROM_ADDRESS: support@expedition-grundeinkommen.de
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource: 'arn:aws:ses:eu-central-1:550953582247:identity/support@expedition-grundeinkommen.de'

  defineAuthChallenge:
    handler: src/triggers/auth/defineAuthChallenge/index.handler
    events:
      - cognitoUserPool:
          pool: AdminUserPool
          trigger: DefineAuthChallenge
      - cognitoUserPool:
          pool: UserPool
          trigger: DefineAuthChallenge

  preSignUp:
    handler: src/triggers/auth/preSignUp/index.handler
    events:
      - cognitoUserPool:
          pool: AdminUserPool
          trigger: PreSignUp

  verifyAuthChallengeResponse:
    handler: src/triggers/auth/verifyAuthChallengeResponse/index.handler
    events:
      - cognitoUserPool:
          pool: AdminUserPool
          trigger: VerifyAuthChallengeResponse
      - cognitoUserPool:
          pool: UserPool
          trigger: VerifyAuthChallengeResponse

# CloudFormation resource templates
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: cognitoId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: cognitoId
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: emailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5

    SignaturesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.signaturesTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: userIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5

    # General user pool
    # A Cognito User Pool created by an event can be overridden by using the logical resource name
    CognitoUserPoolUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: ${self:custom.stage}-user-pool
        # Set email as an alias
        UsernameAttributes:
          - email
          - phone_number
        AutoVerifiedAttributes:
          - email
          - phone_number
        EmailConfiguration:
          EmailSendingAccount: DEVELOPER
          SourceArn: arn:aws:ses:eu-west-1:550953582247:identity/support@expedition-grundeinkommen.de
          From: Expedition Grundeinkommen <support@expedition-grundeinkommen.de>
        SmsConfiguration:
          SnsCallerArn: arn:aws:iam::550953582247:role/service-role/Cognito-SMS-Role
          ExternalId: cf03d420-a229-44ae-9fcd-d5af9e5b594e
        Policies:
          PasswordPolicy: # We generate a fake password anyway (passwordless)
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:custom.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPoolUserPool
        GenerateSecret: false

    # Authorizer for general user pool
    # https://stackoverflow.com/questions/41664708/cognito-user-pool-authorizer-with-serverless-framework
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: UserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - Fn::GetAtt:
              - CognitoUserPoolUserPool
              - Arn

    # Admin user pool
    # A Cognito User Pool created by an event can be overridden by using the logical resource name
    CognitoUserPoolAdminUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: ${self:custom.stage}-admin-pool
        # Set email as an alias
        UsernameAttributes:
          - email
          - phone_number
        AutoVerifiedAttributes:
          - email
          - phone_number
        EmailConfiguration:
          EmailSendingAccount: DEVELOPER
          SourceArn: arn:aws:ses:eu-west-1:550953582247:identity/support@expedition-grundeinkommen.de
          From: Expedition Grundeinkommen <support@expedition-grundeinkommen.de>
        SmsConfiguration:
          SnsCallerArn: arn:aws:iam::550953582247:role/service-role/Cognito-SMS-Role
          ExternalId: cf03d420-a229-44ae-9fcd-d5af9e5b594e
        Policies:
          PasswordPolicy: # We generate a fake password anyway (passwordless)
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false

    AdminUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:custom.stage}-admin-pool-client
        UserPoolId:
          Ref: CognitoUserPoolAdminUserPool
        ExplicitAuthFlows:
          - CUSTOM_AUTH_FLOW_ONLY
        GenerateSecret: false

    # Authorizer for admin user pool
    # https://stackoverflow.com/questions/41664708/cognito-user-pool-authorizer-with-serverless-framework
    AdminApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: AdminUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - Fn::GetAtt:
              - CognitoUserPoolAdminUserPool
              - Arn

# Print out the Id of the User Pool that is created
Outputs:
  UserPoolId:
    Value:
      Ref: CognitoUserPoolUserPool

  UserPoolClientId:
    Value:
      Ref: UserPoolClient

  AdminUserPoolId:
    Value:
      Ref: CognitoUserPoolAdminUserPool

  AdminUserPoolClientId:
    Value:
      Ref: AdminUserPoolClient
